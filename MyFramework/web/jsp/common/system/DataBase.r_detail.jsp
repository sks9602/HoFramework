<%@ page language="java" contentType="text/html;  charset=utf-8" pageEncoding="utf-8" session="true"%><%@ page	import="project.jun.dao.result.HoList"	import="project.jun.util.HoUtil"	import="project.jun.util.HoValidator"	import="project.jun.dao.result.transfigure.HoSetHasMap"%><%@include file="/jsp/common/include/include.jsp"%><style>body {scroll=yes; }</style><%	HoList list = model.getHoList("ds_ColumnList");%><span><%-- HoSetHasMap  setMap = new HoSetHasMap(list, "COLUMN_NAME" );out.println( setMap.getHoMap("TITLE_CODE").get("COLUMN_COMMENTS_O") );--%><%-- out.println(getCodeName("TITLE_CODE", "CAP_TABLE_NAME")); --%><%-- out.println(getCodeName("TITLE_CODE")); --%><br/>	<% if( HoValidator.isEmpty(param.get("type")) || param.get("type").equals("select")) { %>	<%= makeSelect(param.get("table_name"), list, param.get("param_type"), param.get("opt"), param.get("cs"), param.get("cf"), param.get("cw"), param.get("cil"), param.get("cp"), param.get("vo")) %><br/><br/>	<% } %>	<% if( HoValidator.isEmpty(param.get("type")) || param.get("type").equals("insert")) { %>	<%= makeInsert(param.get("table_name"), list, param.get("param_type"), param.get("opt"), param.get("cf"), param.get("ci"), param.get("cv"), param.get("cs"), param.get("vo")) %><br/><br/>	<% } %>	<% if( HoValidator.isEmpty(param.get("type")) || param.get("type").equals("update")) { %>	<%= makeUpdate(param.get("table_name"), list, param.get("param_type"), param.get("opt"), param.get("cf"), param.get("cu"), param.get("cw"), param.get("vo")) %><br/><br/>	<% } %>	<% if( HoValidator.isEmpty(param.get("type")) || param.get("type").equals("merge")) { %>	<%= makeMerge(param.get("table_name"), list, param.get("param_type"), param.get("opt"), param.get("cf"), param.get("ci"), param.get("cv"),  param.get("cu"), param.get("cw"), param.get("vo")) %><br/><br/>	<% } %>	<% if( HoValidator.isEmpty(param.get("type")) || param.get("type").equals("delete")) { %>	<%= makeDelete(param.get("table_name"), list, param.get("param_type"), param.get("cf"), param.get("cw"), param.get("vo")) %><br/><br/>	<% } %>	<% if( HoValidator.isEmpty(param.get("type")) || param.get("type").equals("param")) { %>	<%= makeParam(param.get("table_name"), list, param.get("param_type"), param.get("opt"), param.get("cw") , param.get("cp"), param.get("indent"), param.get("suffix"), param.get("camel"), param.get("vo")) %><br/><br/>	<% } %><%!	private String makeMerge(String tableName, HoList list, String param_type, String opt, String cf, String ci, String cv, String cu, String cw, String vo) {		StringBuffer sb = new StringBuffer();		sb.append("---- merge");		if( list.size()>0 ) {			sb.append(list.getString(0, "CAP_TABLE_NAME") );		}		sb.append("\r\n").append("--  \r\n");		sb.append("MERGE INTO  ").append(list.getString(0, "TABLE_NAME")).append(" USING DUAL ");		if( cf.equals("Y")) {			sb.append("  ").append(list.getString(0, "TABLE_COMMENTS"));		}		sb.append("\r\n");		sb.append("   ON (");		for(int i=0; i<list.size(); i++ ) {			if( i != 0 ) {				sb.append("    AND ");			} else {				sb.append(" ");			}			sb.append(HoUtil.rPad(list.getString(i, "T_COLUMN_NAME"),list.getInt(i, "COLUMN_MAX"), " "));			if( param_type.equals("M")) {				sb.append(" = ''");			} else if( param_type.equals("Q")) {				sb.append(" = ?");			} else if( param_type.equals("P")) {				sb.append(" = :P");			} else if( param_type.equals("PN")) {				sb.append(" = :P").append(i);			} else if( param_type.equals("I")) {				if( "Y".equals(vo) ) {					sb.append(HoUtil.rPad(" = #"+HoUtil.toCamel(list.getString(i, "COLUMN_NAME"))+"#",list.getInt(i, "COLUMN_MAX")+2, " "));				} else {					sb.append(HoUtil.rPad(" = #"+list.getString(i, "COLUMN_NAME")+"#",list.getInt(i, "COLUMN_MAX")+2, " "));				}			} else if( param_type.equals("My")) {				if( "Y".equals(vo) ) {					sb.append(HoUtil.rPad(" = #{"+HoUtil.toCamel(list.getString(i, "COLUMN_NAME"))+"}",list.getInt(i, "COLUMN_MAX")+2, " "));				} else {					sb.append(HoUtil.rPad(" = #{"+list.getString(i, "COLUMN_NAME")+"}",list.getInt(i, "COLUMN_MAX")+2, " "));				}			} else {				sb.append(" = ''");			}			if( cw.equals("Y")) {				sb.append("  ").append(list.getString(i, "COLUMN_COMMENTS"));			}			sb.append("\r\n");		}		sb.append("   ) ").append("\r\n");    	sb.append(" WHEN MATCHED THEN UPDATE SET").append("\r\n");		for(int i=0,j=0; i<list.size(); i++ ) {			if( true || HoValidator.isEmpty(list.getString(i, "PK_IDX"))) {				if( j== 0 ) {					sb.append("      ");					j++;				} else {					sb.append("     ,");				}				sb.append(HoUtil.rPad(list.getString(i, "T_COLUMN_NAME"),list.getInt(i, "COLUMN_MAX"), " "));				if( list.getString(i, "COLUMN_NAME").equals("REGI_DT") ||  list.getString(i, "COLUMN_NAME").equals("MODI_DT")) {					sb.append(" = SYSDATE ");				} else {					if( param_type.equals("M")) {						sb.append(" = ''");					} else if( param_type.equals("Q")) {						sb.append(" = ?");					} else if( param_type.equals("P")) {						if( list.getString(i, "COLUMN_NAME").equals("REGI_NO") ||  list.getString(i, "COLUMN_NAME").equals("MODI_NO")) {							sb.append(" = :CMEMB");						}  else {							if( list.getString(i, "DATA_TYPE").indexOf("LOB") >= 0 ) {								sb.append(" = :L");							} else {								sb.append(" = :P");							}						}					} else if( param_type.equals("PN")) {						if( list.getString(i, "COLUMN_NAME").equals("REGI_NO") ||  list.getString(i, "COLUMN_NAME").equals("MODI_NO")) {							sb.append(" = :CMEMB");						}  else {							if( list.getString(i, "DATA_TYPE").indexOf("LOB") >= 0 ) {								sb.append(" = :L").append(i);							} else {								sb.append(" = :P").append(i);							}						}					} else if( param_type.equals("I")) {						if( "Y".equals(vo) ) {							sb.append(HoUtil.rPad(" = #"+HoUtil.toCamel(list.getString(i, "COLUMN_NAME"))+"#",list.getInt(i, "COLUMN_MAX")+2, " "));						} else {							sb.append(HoUtil.rPad(" = #"+list.getString(i, "COLUMN_NAME")+"#",list.getInt(i, "COLUMN_MAX")+2, " "));						}					} else if( param_type.equals("My")) {						if( "Y".equals(vo) ) {							sb.append(HoUtil.rPad(" = #{"+HoUtil.toCamel(list.getString(i, "COLUMN_NAME"))+"}",list.getInt(i, "COLUMN_MAX")+2, " "));						} else {							sb.append(HoUtil.rPad(" = #{"+list.getString(i, "COLUMN_NAME")+"}",list.getInt(i, "COLUMN_MAX")+2, " "));						}					} else {						sb.append(" = ''");					}				}				if( cu.equals("Y")) {					sb.append("  ").append(list.getString(i, "COLUMN_COMMENTS"));				}				sb.append("\r\n");			}		}    	sb.append(" WHEN NOT MATCHED THEN").append("\r\n");		sb.append("  INSERT (  ");		for(int i=0; i<list.size(); i++ ) {			if( i!=0 ) {				sb.append(HoUtil.lPad(",", 12, " "));			}			if( ci.equals("Y")) {				sb.append(HoUtil.rPad(list.getString(i, "COLUMN_NAME"),list.getInt(i, "COLUMN_MAX")+2, " "));				sb.append(list.getString(i, "COLUMN_COMMENTS"));			} else {				sb.append(list.getString(i, "COLUMN_NAME"));			}			if( i!= list.size()-1 ) {				sb.append("\r\n");			}		}		sb.append("\r\n").append("  )");		for(int i=0; i<list.size(); i++ ) {			if( i!=0 ) {				sb.append(HoUtil.lPad(",", 13, " "));			} else {				sb.append(" VALUES ( ");			}			if( list.getString(i, "COLUMN_NAME").equals("REGI_DT") ||  list.getString(i, "COLUMN_NAME").equals("MODI_DT")) {				sb.append("SYSDATE  /* ");			} else {				if( param_type.equals("M")) {					sb.append("''  /* ");				} else if( param_type.equals("Q")) {					sb.append("? /* ");				} else if( param_type.equals("P")) {					if( list.getString(i, "COLUMN_NAME").equals("REGI_NO") ||  list.getString(i, "COLUMN_NAME").equals("MODI_NO")) {						sb.append(":CMEMB  /* ");					}  else {						if( list.getString(i, "DATA_TYPE").indexOf("LOB") >= 0 ) {							sb.append(":L  /* ");						} else {							sb.append(":P  /* ");						}					}				} else if( param_type.equals("PN")) {					if( list.getString(i, "COLUMN_NAME").equals("REGI_NO") ||  list.getString(i, "COLUMN_NAME").equals("MODI_NO")) {						sb.append(":CMEMB  /* ");					}  else {						if( list.getString(i, "DATA_TYPE").indexOf("LOB") >= 0 ) {							sb.append(":L").append(i).append("  /* ");						} else {							sb.append(":P").append(i).append("  /* ");						}					}				} else if( param_type.equals("I")) {					if( "Y".equals(vo) ) {						sb.append(HoUtil.rPad("#"+HoUtil.toCamel(list.getString(i, "COLUMN_NAME"))+"#",list.getInt(i, "COLUMN_MAX")+2, " ")).append("  /* ");					} else {						sb.append(HoUtil.rPad("#"+list.getString(i, "COLUMN_NAME")+"#",list.getInt(i, "COLUMN_MAX")+2, " ")).append("  /* ");					}				} else if( param_type.equals("My")) {					if( "Y".equals(vo) ) {						sb.append(HoUtil.rPad("#{"+HoUtil.toCamel(list.getString(i, "COLUMN_NAME"))+"}",list.getInt(i, "COLUMN_MAX")+2, " ")).append("  /* ");					} else {						sb.append(HoUtil.rPad("#{"+list.getString(i, "COLUMN_NAME")+"}",list.getInt(i, "COLUMN_MAX")+2, " ")).append("  /* ");					}				} else {					sb.append("''  /* ");				}			}			if( cv.equals("Y")) {				sb.append(list.getString(i, "COLUMN_NAME")).append(" - ").append(list.getString(i, "COLUMN_COMMENTS_O"));			} else {				sb.append(list.getString(i, "COLUMN_NAME"));			}			sb.append(" */");			if( i!= list.size()-1 ) {				sb.append("\r\n");			}		}		sb.append("\r\n").append("   )").append("\r\n");		return HoUtil.escapeForHtml(sb.toString());	}	private String makeSelect(String tableName, HoList list, String param_type, String opt, String cs, String cf, String cw, String cil, String cp, String vo) {		StringBuffer sb = new StringBuffer();		if( param_type.startsWith("P")) {			sb.append("---- select");			if( list.size()>0 ) {				sb.append(list.getString(0, "CAP_TABLE_NAME") );			}			sb.append("\r\n").append("--  \r\n");		} else if( param_type.equals("I")) {			if( "Y".equals(vo)) {				sb.append("<select id=\"select").append(list.getString(0, "CAP_TABLE_NAME")).append("\" parameterType=\"").append(HoUtil.toCamel(list.getString(0, "TABLE_NAME"))).append("Vo\" resultType=\"").append(HoUtil.toCamel(list.getString(0, "TABLE_NAME"))).append("Map\">\r\n");			} else {				sb.append("<select id=\"select").append(list.getString(0, "CAP_TABLE_NAME")).append("\" parameterType=\"queryParameterMap\" resultType=\"queryResultListMap\">\r\n");			}		} else if( param_type.equals("My")) {			if( "Y".equals(vo)) {				sb.append("<select id=\"select").append(list.getString(0, "CAP_TABLE_NAME")).append("\" parameterType=\"").append(HoUtil.toCamel(list.getString(0, "TABLE_NAME"))).append("Vo\" resultType=\"").append(HoUtil.toCamel(list.getString(0, "TABLE_NAME"))).append("Map\">\r\n");			} else {				sb.append("<select id=\"select").append(list.getString(0, "CAP_TABLE_NAME")).append("\" parameterType=\"queryParameterMap\" resultType=\"queryResultListMap\">\r\n");			}		} 				sb.append("SELECT ");		int newLine = 0;		if( HoValidator.isNotEmpty(cil) && HoValidator.isNumber(cil)) {			newLine = Integer.parseInt(cil);			if( newLine <=0 ) {				newLine = 0;			}		}		for(int i=0, j=0; i<list.size(); i++, j++ ) {			if( i!=0 ) {				if( newLine <= 1) {					sb.append("\r\n");				} else {					if( newLine > 1 && j%newLine != 0 &&							(HoValidator.isNotEmpty(list.getString(i, "CODE"))								||(list.getString(i, "DATA_TYPE").indexOf("CHAR") >= 0 && list.getInt(i, "DATA_LENGTH") == 8)								||(list.getString(i, "DATA_TYPE").equals("DATE")))) {						sb.append("\r\n");						j=newLine;					} else if(j!=0 && j%newLine == 0) {						sb.append("\r\n");					}				}				if( newLine <=1 ) {					sb.append(HoUtil.lPad(",", 7, " "));				} else {					if( newLine!=0 && j!=0 && j%newLine == 0 ) {						sb.append(HoUtil.lPad(",", 7, " "));					} else {						sb.append(" ,");					}				}			}			sb.append(HoUtil.rPad(list.getString(i, "T_COLUMN_NAME"),list.getInt(i, "COLUMN_MAX")+2, " "));			if( cs.equals("Y")) {				if( cp.equals("Y")) {					sb.append("/* ").append(HoUtil.rPad(list.getString(i, "COLUMN_COMMENTS_O"),list.getInt(i, "COMMENTS_MAX")*2, " ")).append(" */");				} else {					sb.append(list.getString(i, "COLUMN_COMMENTS"));				}			}			if( HoValidator.isNotEmpty(list.getString(i, "SUB_QUERY"))) {				if( newLine <=1 ) {					sb.append("\r\n").append(HoUtil.lPad(",", 7, " "));				} else {					sb.append(" ,");				}				sb.append(list.getString(i, "SUB_QUERY").replaceAll("\\$AS\\$", list.getString(i, "TABLE_ALIAS")));				sb.append(" AS ").append(list.getString(i, "COLUMN_NAME")).append("_NM");				j=newLine-1;			} else if( HoValidator.isNotEmpty(list.getString(i, "CODE"))) {				if( newLine <=1 ) {					sb.append("\r\n").append(HoUtil.lPad(",", 7, " "));				} else {					sb.append(" ,");				}				if( param_type.startsWith("P")) {					sb.append("F_CODE_NAME(:CCOMP, ").append(list.getString(i, "T_COLUMN_NAME")).append(", :CLANG)");				} else {					sb.append("F_CODE_NAME('0001', ").append(list.getString(i, "T_COLUMN_NAME")).append(", 'ko')");				}				sb.append(" AS ").append(list.getString(i, "COLUMN_NAME")).append("_NM");				j=newLine-1;			} else if( list.getString(i, "DATA_TYPE").indexOf("CHAR") >= 0 && list.getInt(i, "DATA_LENGTH") == 8   ) {				if( newLine <=1 ) {					sb.append("\r\n").append(HoUtil.lPad(",", 7, " "));				} else {					sb.append(" ,");				}				sb.append("F_DATE_CHAR(").append(list.getString(i, "T_COLUMN_NAME")).append(")");				sb.append(" AS ").append(list.getString(i, "COLUMN_NAME")).append("_FMT");				j=newLine-1;				if( list.getString(i, "COLUMN_NAME").indexOf("END")>=0 ) {					for(int k=0; k<list.size(); k++ ) {						if( list.getString(k, "DATA_TYPE").indexOf("CHAR") >= 0 && list.getInt(k, "DATA_LENGTH") == 8 && list.getString(k, "COLUMN_NAME").indexOf("START")>=0  ) {							if( newLine <=1 ) {								sb.append("\r\n").append(HoUtil.lPad(",", 7, " "));							} else {								sb.append(" ,");							}							sb.append("F_DATE_CHAR_2(").append(list.getString(k, "T_COLUMN_NAME")).append(", ").append(list.getString(i, "T_COLUMN_NAME")).append(")");							sb.append(" AS ").append("START_").append(list.getString(i, "COLUMN_NAME")).append("_FMT");							j=newLine-1;						}					}				}			} else if( list.getString(i, "DATA_TYPE").equals("DATE")   ) {				if( newLine <=1 ) {					sb.append("\r\n").append(HoUtil.lPad(",", 7, " "));				} else {					sb.append(" ,");				}				sb.append("F_DATE_DATE(").append(list.getString(i, "T_COLUMN_NAME")).append(")");				sb.append(" AS ").append(list.getString(i, "COLUMN_NAME")).append("_FMT");				j=newLine-1;			}		}		sb.append("\r\n");		if( opt.startsWith("SQ")) {			for(int i=0; i<list.size(); i++ ) {				if( i==0 ) {					sb.append(HoUtil.lPad(",(SELECT ", 14, " ")).append("\r\n");					sb.append(HoUtil.lPad("    FROM ", 14, " ")).append("\r\n");					sb.append(HoUtil.lPad("   WHERE ", 14, " "));				}				if( opt.equals("SQ") || (HoValidator.isNotEmpty(list.getString(i, "PK_IDX")) && opt.equals("SQP")) ) {					if( i > 0 ) {						if((HoValidator.isNotEmpty(list.getString(i, "PK_IDX")) && opt.equals("SQP"))) {							sb.append("\r\n");						}						sb.append(HoUtil.lPad("     AND ", 14, " "));					}					sb.append(HoUtil.rPad(list.getString(i, "COLUMN_NAME"),list.getInt(i, "COLUMN_MAX")-list.getString(i, "TABLE_ALIAS").length(), " "));					sb.append("  = ").append(list.getString(i, "T_COLUMN_NAME"));					if( opt.equals("SQ") && i != list.size()-1) {						sb.append("\r\n");					}				}				if( i == list.size()-1) {					sb.append(" ) AS ").append("\r\n");				}			}		}		sb.append("  FROM ").append(list.getString(0, "TABLE_NAME")).append(" ").append(list.getString(0, "TABLE_ALIAS"));		if( cf.equals("Y")) {			sb.append("  ").append(list.getString(0, "TABLE_COMMENTS"));		}		sb.append("\r\n");		sb.append(" WHERE 1 = 1 ").append("\r\n");		for(int i=0; i<list.size(); i++ ) {			//if( HoValidator.isNotEmpty(list.getString(i, "PK_IDX"))) {				sb.append("   AND ").append(HoUtil.rPad(list.getString(i, "T_COLUMN_NAME"),list.getInt(i, "COLUMN_MAX"), " "));				if( param_type.equals("M")) {					sb.append(" = ''");				} else if( param_type.equals("Q")) {					sb.append(" = ? ");				} else if( param_type.equals("P")) {					sb.append(" = :P");				} else if( param_type.equals("PN")) {					sb.append(" = :P").append(i);				} else if( param_type.equals("I")) {					if( "Y".equals(vo) ) {						sb.append(HoUtil.rPad(" = #"+HoUtil.toCamel(list.getString(i, "COLUMN_NAME"))+"#",list.getInt(i, "COLUMN_MAX")+2, " "));					} else {						sb.append(HoUtil.rPad(" = #"+list.getString(i, "COLUMN_NAME")+"#",list.getInt(i, "COLUMN_MAX")+2, " "));					}				} else if( param_type.equals("My")) {					if( "Y".equals(vo) ) {						sb.append(HoUtil.rPad(" = #{"+HoUtil.toCamel(list.getString(i, "COLUMN_NAME"))+"}",list.getInt(i, "COLUMN_MAX")+2, " "));					} else {						sb.append(HoUtil.rPad(" = #{"+list.getString(i, "COLUMN_NAME")+"}",list.getInt(i, "COLUMN_MAX")+2, " "));					}				} else {					sb.append(" = ''");				}				if( cw.equals("Y")) {					sb.append("  ").append(list.getString(i, "COLUMN_COMMENTS"));				}				sb.append("\r\n");			//}		}		if( param_type.equals("I")) {			sb.append("</select>");		} else if( param_type.equals("My")) {			sb.append("</select>");		}		return HoUtil.escapeForHtml(sb.toString());	}	private String makeInsert(String tableName, HoList list, String param_type, String opt, String cf, String ci, String cv, String cs, String vo) {		StringBuffer sb = new StringBuffer();		if( param_type.startsWith("P")) {			sb.append("---- insert");			if( list.size()>0 ) {				sb.append(list.getString(0, "CAP_TABLE_NAME") );			}		} else if( param_type.equals("I")) {			if( "Y".equals(vo)) {				sb.append("<insert id=\"insert").append(list.getString(0, "CAP_TABLE_NAME")).append("\" parameterType=\"").append(HoUtil.toCamel(list.getString(0, "TABLE_NAME"))).append("Vo\" >");			} else {				sb.append("<insert id=\"insert").append(list.getString(0, "CAP_TABLE_NAME")).append("\" parameterType=\"queryParameterMap\" >");			}		} else if( param_type.equals("My")) {			if( "Y".equals(vo)) {				sb.append("<insert id=\"insert").append(list.getString(0, "CAP_TABLE_NAME")).append("\" parameterType=\"").append(HoUtil.toCamel(list.getString(0, "TABLE_NAME"))).append("Vo\" >");			} else {				sb.append("<insert id=\"insert").append(list.getString(0, "CAP_TABLE_NAME")).append("\" parameterType=\"queryParameterMap\" >");			}		} else {					}		sb.append("\r\n");		sb.append("INSERT INTO ").append(tableName);		if( cf.equals("Y")) {			sb.append("  ").append(list.getString(0, "TABLE_COMMENTS"));		}		sb.append("\r\n");		sb.append(HoUtil.lPad("( ", 12, " "));		for(int i=0; i<list.size(); i++ ) {			if( i!=0 ) {				sb.append(HoUtil.lPad(",", 12, " "));			}			if( ci.equals("Y")) {				sb.append(HoUtil.rPad(list.getString(i, "COLUMN_NAME"),list.getInt(i, "COLUMN_MAX")+2, " "));				sb.append(list.getString(i, "COLUMN_COMMENTS"));			} else {				sb.append(list.getString(i, "COLUMN_NAME"));			}			if( i!= list.size()-1 ) {				sb.append("\r\n");			}		}		sb.append(" ) ").append("\r\n");		for(int i=0; i<list.size(); i++ ) {			if( i!=0 ) {				sb.append(HoUtil.lPad(",", 12, " "));			} else {				// sb.append(HoUtil.lPad(" VALUES ( ", 12, " "));				sb.append("   VALUES \r\n");				sb.append(HoUtil.lPad("( ", 12, " "));			}			if( list.getString(i, "COLUMN_NAME").equals("REGI_DT") ||  list.getString(i, "COLUMN_NAME").equals("MODI_DT")) {				sb.append("SYSDATE  /* ");			} else {				if( param_type.equals("M")) {					sb.append("''  /* ");				} else if( param_type.equals("Q")) {					sb.append("? /* ");				} else if( param_type.equals("P")) {					if( list.getString(i, "COLUMN_NAME").equals("REGI_NO") ||  list.getString(i, "COLUMN_NAME").equals("MODI_NO")) {						sb.append(":CMEMB  /* ");					}  else {						if( list.getString(i, "DATA_TYPE").indexOf("LOB") >= 0 ) {							sb.append(":L  /* ");						} else {							sb.append(":P  /* ");						}					}				} else if( param_type.equals("PN")) {					if( list.getString(i, "COLUMN_NAME").equals("REGI_NO") ||  list.getString(i, "COLUMN_NAME").equals("MODI_NO")) {						sb.append(":CMEMB  /* ");					}  else {						if( list.getString(i, "DATA_TYPE").indexOf("LOB") >= 0 ) {							sb.append(":L").append(i).append("  /* ");						} else {							sb.append(":P").append(i).append("  /* ");						}					}				} else if( param_type.equals("I")) {					if( "Y".equals(vo) ) {						sb.append(HoUtil.rPad("#"+HoUtil.toCamel(list.getString(i, "COLUMN_NAME"))+"#",list.getInt(i, "COLUMN_MAX")+2, " ")).append("  /* ");					} else {						sb.append(HoUtil.rPad("#"+list.getString(i, "COLUMN_NAME")+"#",list.getInt(i, "COLUMN_MAX")+2, " ")).append("  /* ");					}				} else if( param_type.equals("My")) {					if( "Y".equals(vo) ) {						sb.append(HoUtil.rPad("#{"+HoUtil.toCamel(list.getString(i, "COLUMN_NAME"))+"}",list.getInt(i, "COLUMN_MAX")+2, " ")).append("  /* ");					} else {						sb.append(HoUtil.rPad("#{"+list.getString(i, "COLUMN_NAME")+"}",list.getInt(i, "COLUMN_MAX")+2, " ")).append("  /* ");					}				} else {					sb.append("''  /* ");				}			}			if( cv.equals("Y")) {				sb.append(list.getString(i, "COLUMN_NAME")).append(" - ").append(list.getString(i, "COLUMN_COMMENTS_O"));			} else {				sb.append(list.getString(i, "COLUMN_NAME"));			}			sb.append(" */");			if( i!= list.size()-1 ) {				sb.append("\r\n");			}		}		sb.append(" ) ").append("\r\n");		if( opt.equals("FS")) {			sb.append("\r\n\r\n");			sb.append(HoUtil.lPad("SELECT ", 12, " "));			for(int i=0; i<list.size(); i++ ) {				if( i!=0 ) {					sb.append(HoUtil.lPad(",", 12, " "));				}				if( param_type.equals("M")) {					sb.append("''");				} else if( param_type.equals("Q")) {					sb.append("?");				} else if( param_type.equals("P")) {					sb.append(":P");				} else if( param_type.equals("PN")) {					sb.append(":P").append(i);				} else if( param_type.equals("I")) {					sb.append(HoUtil.rPad("#"+list.getString(i, "COLUMN_NAME")+"#",list.getInt(i, "COLUMN_MAX")+2, " "));				}				if( cs.equals("Y")) {					sb.append(" AS ").append(HoUtil.rPad(list.getString(i, "COLUMN_NAME"),list.getInt(i, "COLUMN_MAX")+2, " "));					sb.append("  ").append(list.getString(i, "COLUMN_COMMENTS"));				} else {					sb.append(" AS ").append(list.getString(i, "COLUMN_NAME"));				}				sb.append("\r\n");			}			sb.append(HoUtil.lPad("  FROM ", 12, " ")).append("\r\n");			sb.append(HoUtil.lPad(" WHERE ", 12, " ")).append("\r\n");		}		if( param_type.equals("I")) {			sb.append("</insert>");		} else if( param_type.equals("My")) {			sb.append("</insert>");		} 		return HoUtil.escapeForHtml(sb.toString());	}	private String makeUpdate(String tableName, HoList list, String param_type, String opt, String cf, String cu, String cw, String vo) {		StringBuffer sb = new StringBuffer();		if( param_type.startsWith("P")) {			sb.append("---- update");			if( list.size()>0 ) {				sb.append(list.getString(0, "CAP_TABLE_NAME") );			}		} else if( param_type.equals("I")) {			if( "Y".equals(vo)) {				sb.append("<update id=\"update").append(list.getString(0, "CAP_TABLE_NAME")).append("\" parameterType=\"").append(HoUtil.toCamel(list.getString(0, "TABLE_NAME"))).append("Vo\" >");			} else {				sb.append("<update id=\"update").append(list.getString(0, "CAP_TABLE_NAME")).append("\" parameterType=\"queryParameterMap\" >");			}		} else if( param_type.equals("My")) {			if( "Y".equals(vo)) {				sb.append("<update id=\"update").append(list.getString(0, "CAP_TABLE_NAME")).append("\" parameterType=\"").append(HoUtil.toCamel(list.getString(0, "TABLE_NAME"))).append("Vo\" >");			} else {				sb.append("<update id=\"update").append(list.getString(0, "CAP_TABLE_NAME")).append("\" parameterType=\"queryParameterMap\" >");			}		} else {					}		sb.append("\r\n");		sb.append("UPDATE ").append(tableName).append(" ").append(list.getString(0, "TABLE_ALIAS")).append(" SET ");		if( cf.equals("Y")) {			sb.append("  ").append(list.getString(0, "TABLE_COMMENTS"));		}		sb.append("\r\n");		for(int i=0,j=0; i<list.size(); i++ ) {			if( HoValidator.isEmpty(list.getString(i, "PK_IDX"))) {				if( j== 0 ) {					sb.append("       ");					j++;				} else {					sb.append("      ,");				}				sb.append(HoUtil.rPad(list.getString(i, "T_COLUMN_NAME"),list.getInt(i, "COLUMN_MAX"), " "));				if( list.getString(i, "COLUMN_NAME").equals("REGI_DT") ||  list.getString(i, "COLUMN_NAME").equals("MODI_DT")) {					sb.append(" = SYSDATE ");				} else {					if( param_type.equals("M")) {						sb.append(" = ''");					} else if( param_type.equals("Q")) {						sb.append(" = ?");					} else if( param_type.equals("P")) {						if( list.getString(i, "COLUMN_NAME").equals("REGI_NO") ||  list.getString(i, "COLUMN_NAME").equals("MODI_NO")) {							sb.append(" = :CMEMB");						}  else {							if( list.getString(i, "DATA_TYPE").indexOf("LOB") >= 0 ) {								sb.append(" = :L");							} else {								sb.append(" = :P");							}						}					} else if( param_type.equals("PN")) {						if( list.getString(i, "COLUMN_NAME").equals("REGI_NO") ||  list.getString(i, "COLUMN_NAME").equals("MODI_NO")) {							sb.append(" = :CMEMB");						}  else {							if( list.getString(i, "DATA_TYPE").indexOf("LOB") >= 0 ) {								sb.append(" = :L").append(i);							} else {								sb.append(" = :P").append(i);							}						}					} else if( param_type.equals("I")) {						if( "Y".equals(vo) ) {							sb.append(HoUtil.rPad(" = #"+HoUtil.toCamel(list.getString(i, "COLUMN_NAME"))+"#",list.getInt(i, "COLUMN_MAX")+2, " "));						} else {							sb.append(HoUtil.rPad(" = #"+list.getString(i, "COLUMN_NAME")+"#",list.getInt(i, "COLUMN_MAX")+2, " "));						}					} else if( param_type.equals("My")) {						if( "Y".equals(vo) ) {							sb.append(HoUtil.rPad(" = #{"+HoUtil.toCamel(list.getString(i, "COLUMN_NAME"))+"}",list.getInt(i, "COLUMN_MAX")+2, " "));						} else {							sb.append(HoUtil.rPad(" = #{"+list.getString(i, "COLUMN_NAME")+"}",list.getInt(i, "COLUMN_MAX")+2, " "));						}					} else {						sb.append(" = ''");					}				}				if( cu.equals("Y")) {					sb.append("  ").append(list.getString(i, "COLUMN_COMMENTS"));				}				sb.append("\r\n");			}		}		sb.append(" WHERE 1 = 1 ").append("\r\n");		for(int i=0; i<list.size(); i++ ) {			//if( HoValidator.isNotEmpty(list.getString(i, "PK_IDX"))) {				sb.append("   AND ").append(HoUtil.rPad(list.getString(i, "T_COLUMN_NAME"),list.getInt(i, "COLUMN_MAX"), " "));				if( param_type.equals("M")) {					sb.append(" = ''");				} else if( param_type.equals("Q")) {					sb.append(" = ?");				} else if( param_type.equals("P")) {					sb.append(" = :P");				} else if( param_type.equals("PN")) {					sb.append(" = :P").append(i);				} else if( param_type.equals("I")) {					if( "Y".equals(vo) ) {						sb.append(HoUtil.rPad(" = #"+HoUtil.toCamel(list.getString(i, "COLUMN_NAME"))+"#",list.getInt(i, "COLUMN_MAX")+2, " "));					} else {						sb.append(HoUtil.rPad(" = #"+list.getString(i, "COLUMN_NAME")+"#",list.getInt(i, "COLUMN_MAX")+2, " "));					}				} else if( param_type.equals("My")) {					if( "Y".equals(vo) ) {						sb.append(HoUtil.rPad(" = #{"+HoUtil.toCamel(list.getString(i, "COLUMN_NAME"))+"}",list.getInt(i, "COLUMN_MAX")+2, " "));					} else {						sb.append(HoUtil.rPad(" = #{"+list.getString(i, "COLUMN_NAME")+"}",list.getInt(i, "COLUMN_MAX")+2, " "));					}				} else {					sb.append(" = ''");				}				if( cw.equals("Y")) {					sb.append("  ").append(list.getString(i, "COLUMN_COMMENTS"));				}				sb.append("\r\n");			//}		}		if( opt.startsWith("AP")) {			sb.append("\r\n\r\n");			sb.append("   AND ( ");			for(int i=0, j=0; i<list.size(); i++ ) {				if( opt.equals("AP") || ( opt.equals("APP")&&HoValidator.isNotEmpty(list.getString(i, "PK_IDX")))) {					if(j!=0) {						sb.append(", ");					}					sb.append(HoUtil.rPad(list.getString(i, "T_COLUMN_NAME"),list.getInt(i, "COLUMN_MAX"), " "));					j++;				}			}			sb.append(" ) IN ( )");		}		if( param_type.equals("I")) {			sb.append("</update>");		} else if( param_type.equals("My")) {			sb.append("</update>");		} 				return HoUtil.escapeForHtml(sb.toString());	}	private String makeDelete(String tableName, HoList list, String param_type, String cf, String cw, String vo) {		StringBuffer sb = new StringBuffer();		if( param_type.startsWith("P")) {			sb.append("---- delete");			if( list.size()>0 ) {				sb.append(list.getString(0, "CAP_TABLE_NAME") );			}		} else if( param_type.equals("I")) {			if( "Y".equals(vo)) {				sb.append("<delete id=\"delete").append(list.getString(0, "CAP_TABLE_NAME")).append("\" parameterType=\"").append(HoUtil.toCamel(list.getString(0, "TABLE_NAME"))).append("Vo\" >");			} else {				sb.append("<delete id=\"delete").append(list.getString(0, "CAP_TABLE_NAME")).append("\" parameterType=\"queryParameterMap\" >");			}		} else if( param_type.equals("My")) {			if( "Y".equals(vo)) {				sb.append("<delete id=\"delete").append(list.getString(0, "CAP_TABLE_NAME")).append("\" parameterType=\"").append(HoUtil.toCamel(list.getString(0, "TABLE_NAME"))).append("Vo\" >");			} else {				sb.append("<delete id=\"delete").append(list.getString(0, "CAP_TABLE_NAME")).append("\" parameterType=\"queryParameterMap\" >");			}		} else {					}		sb.append("\r\n");		sb.append("DELETE FROM ").append(tableName).append(" ").append(list.getString(0, "TABLE_ALIAS"));		if( cf.equals("Y")) {			sb.append("  ").append(list.getString(0, "TABLE_COMMENTS"));		}		sb.append("\r\n");		sb.append(" WHERE 1 = 1 ").append("\r\n");		for(int i=0; i<list.size(); i++ ) {			//if( HoValidator.isNotEmpty(list.getString(i, "PK_IDX"))) {				sb.append("   AND ").append(HoUtil.rPad(list.getString(i, "T_COLUMN_NAME"),list.getInt(i, "COLUMN_MAX"), " "));			//}			if( param_type.equals("M")) {				sb.append(" = ''");			} else if( param_type.equals("Q")) {				sb.append(" = ?");			} else if( param_type.equals("P")) {				sb.append(" = :P");			} else if( param_type.equals("PN")) {				sb.append(" = :P").append(i);			} else if( param_type.equals("I")) {				if( "Y".equals(vo) ) {					sb.append(HoUtil.rPad(" = #"+HoUtil.toCamel(list.getString(i, "COLUMN_NAME"))+"#",list.getInt(i, "COLUMN_MAX")+2, " "));				} else {					sb.append(HoUtil.rPad(" = #"+list.getString(i, "COLUMN_NAME")+"#",list.getInt(i, "COLUMN_MAX")+2, " "));				}			} else if( param_type.equals("My")) {				if( "Y".equals(vo) ) {					sb.append(HoUtil.rPad(" = #{"+HoUtil.toCamel(list.getString(i, "COLUMN_NAME"))+"}",list.getInt(i, "COLUMN_MAX")+2, " "));				} else {					sb.append(HoUtil.rPad(" = #{"+list.getString(i, "COLUMN_NAME")+"}",list.getInt(i, "COLUMN_MAX")+2, " "));				}			} else {				sb.append(" = ''");			}			if( cw.equals("Y")) {				sb.append("  ").append(list.getString(i, "COLUMN_COMMENTS"));			}			sb.append("\r\n");		}				if( param_type.equals("I")) {			sb.append("</delete>");		} else if( param_type.equals("My")) {			sb.append("</delete>");		} 		return HoUtil.escapeForHtml(sb.toString());	}	private String makeParam(String tableName, HoList list, String param_type, String opt, String cw, String cp, String _indent, String _suffix, String camel, String vo) {		StringBuffer sb = new StringBuffer();		sb.append("String [] param").append(_suffix).append(" = new String["+list.size()+ "];").append("\r\n");		if( param_type.equals("Q") && !param_type.equals("QV")) {			sb.append("int idx = 0; ").append("\r\n");		}		if( param_type.equals("My") ) {			sb.append("<resultMap type=\"").append(HoUtil.toCamel(list.getString(0, "TABLE_NAME"))).append("Vo\"").append(" id=\"").append(HoUtil.toCamel(list.getString(0, "TABLE_NAME"))).append("Map\" >");			sb.append("\r\n");		}						for(int i=0; i<list.size(); i++ ) {			if( param_type.equals("M")) {				sb.append("String ");				if( camel.equals("Y")) {					sb.append(HoUtil.toCamel(HoUtil.rPad(list.getString(i, "COLUMN_NAME").toLowerCase(),list.getInt(i, "COLUMN_MAX")+list.getString(i, "COLUMN_NAME").replaceAll("[a-zA-Z0-9]+", "").length(), " ")));				} else {					sb.append(HoUtil.rPad(list.getString(i, "COLUMN_NAME").toLowerCase(),list.getInt(i, "COLUMN_MAX"), " "));				}				sb.append(" = request.getParametemer(\"");				if( camel.equals("Y")) {					sb.append(HoUtil.toCamel(list.getString(i, "COLUMN_NAME")));				} else {					sb.append(list.getString(i, "COLUMN_NAME").toLowerCase());				}				sb.append("\")");				if( list.getString(i, "DATA_TYPE").indexOf("CHAR") >= 0 && list.getInt(i, "DATA_LENGTH") == 8   ) {					sb.append(".replaceAll(\"[-.]\", \"\")");				} else if( list.getString(i, "DATA_TYPE").equals("DATE")   ) {					sb.append(".replaceAll(\"[-.]\", \"\")");				}				sb.append(";");			} else if( param_type.equals("Q")) {				sb.append("pstmt.setString(idx++, ").append("request.getParametemer(\"");				if( camel.equals("Y")) {					sb.append(HoUtil.toCamel(list.getString(i, "COLUMN_NAME")));				} else {					sb.append(list.getString(i, "COLUMN_NAME").toLowerCase());				}				sb.append("\")");				if( list.getString(i, "DATA_TYPE").indexOf("CHAR") >= 0 && list.getInt(i, "DATA_LENGTH") == 8   ) {					sb.append(".replaceAll(\"[-.]\", \"\")");				} else if( list.getString(i, "DATA_TYPE").equals("DATE")   ) {					sb.append(".replaceAll(\"[-.]\", \"\")");				}				sb.append(");");			} else if( param_type.equals("P")) {				if( list.getString(i, "DATA_TYPE").indexOf("CHAR") >= 0 && list.getInt(i, "DATA_LENGTH") == 8   ) {					sb.append("param").append(_suffix).append("[").append("] = hh.get(\"");					if( camel.equals("Y")) {						sb.append(HoUtil.toCamel(list.getString(i, "COLUMN_NAME")));					} else {						sb.append(list.getString(i, "COLUMN_NAME").toLowerCase());					}					sb.append("\").replaceAll(\"[-.]\", \"\");");				} else if( list.getString(i, "DATA_TYPE").equals("DATE")   ) {					sb.append("param").append(_suffix).append("[").append("] = hh.get(\"");					if( camel.equals("Y")) {						sb.append(HoUtil.toCamel(list.getString(i, "COLUMN_NAME")));					} else {						sb.append(list.getString(i, "COLUMN_NAME").toLowerCase());					}					sb.append("\").replaceAll(\"[-.]\", \"\");");				} else {					sb.append("param").append(_suffix).append("[").append("] = hh.get(\"");					if( camel.equals("Y")) {						sb.append(HoUtil.toCamel(list.getString(i, "COLUMN_NAME")));					} else {						sb.append(list.getString(i, "COLUMN_NAME").toLowerCase());					}					sb.append("\");");				}			} else if( param_type.equals("PN")) {				if( list.getString(i, "DATA_TYPE").indexOf("CHAR") >= 0 && list.getInt(i, "DATA_LENGTH") == 8   ) {					sb.append("param").append(_suffix).append("[");					sb.append( HoUtil.lPad(" ", String.valueOf(list.size()).length() - String.valueOf(i).length() , " ")  );					sb.append(i).append("] = hh.get(\"");					if( camel.equals("Y")) {						sb.append(HoUtil.toCamel(list.getString(i, "COLUMN_NAME")));					} else {						sb.append(list.getString(i, "COLUMN_NAME").toLowerCase());					}					sb.append("\").replaceAll(\"[-.]\", \"\");");				} else if( list.getString(i, "DATA_TYPE").equals("DATE")   ) {					sb.append("param").append(_suffix).append("[");					sb.append( HoUtil.lPad(" ", String.valueOf(list.size()).length() - String.valueOf(i).length() , " ")  );					sb.append(i).append("] = hh.get(\"");					if( camel.equals("Y")) {						sb.append(HoUtil.toCamel(list.getString(i, "COLUMN_NAME")));					} else {						sb.append(list.getString(i, "COLUMN_NAME").toLowerCase());					}					sb.append("\").replaceAll(\"[-.]\", \"\");");				} else {					sb.append("param").append(_suffix).append("[");					sb.append( HoUtil.lPad(" ", String.valueOf(list.size()).length() - String.valueOf(i).length() , " ")  );					sb.append(i).append("] = hh.get(\"");					if( camel.equals("Y")) {						sb.append(HoUtil.toCamel(list.getString(i, "COLUMN_NAME")));					} else {						sb.append(list.getString(i, "COLUMN_NAME").toLowerCase());					}					sb.append("\");");				}			} else if( param_type.equals("I")) {				sb.append("아직 구현 안했지~~");			} else if( param_type.equals("My")) {				sb.append("\t").append("<result property=").append(HoUtil.rPad(HoUtil.toCamel("\""+list.getString(i, "COLUMN_NAME"))+"\"", list.getInt(i, "COLUMN_MAX"), " ")).append(" column=\"").append(list.getString(i, "COLUMN_NAME")).append("\"/>");			} else if( param_type.equals("PV")) {				if( cp.equals("Y") ) {					sb.append("String ");					if( camel.equals("Y")) {						sb.append(HoUtil.toCamel(HoUtil.rPad(list.getString(i, "COLUMN_NAME"),list.getInt(i, "COLUMN_MAX")+list.getString(i, "COLUMN_NAME").replaceAll("[a-zA-Z0-9]+", "").length(), " ")));					} else {						sb.append(HoUtil.rPad(list.getString(i, "COLUMN_NAME"),list.getInt(i, "COLUMN_MAX"), " ").toLowerCase());					}				} else {					sb.append("String ");					if( camel.equals("Y")) {						sb.append(HoUtil.toCamel(list.getString(i, "COLUMN_NAME")));					} else {						sb.append(list.getString(i, "COLUMN_NAME").toLowerCase());					}					sb.append(" = \"\";");				}			} else if( param_type.equals("PVN")) {				if( cp.equals("Y") ) {					sb.append("String ");					if( camel.equals("Y")) {						sb.append(HoUtil.toCamel(HoUtil.rPad(list.getString(i, "COLUMN_NAME"),list.getInt(i, "COLUMN_MAX")+list.getString(i, "COLUMN_NAME").replaceAll("[a-zA-Z0-9]+", "").length(), " ")));					} else {						sb.append(HoUtil.rPad(list.getString(i, "COLUMN_NAME"),list.getInt(i, "COLUMN_MAX"), " ").toLowerCase());					}					sb.append(" = \"\";");				} else {					sb.append("String ");					if( camel.equals("Y")) {						sb.append(HoUtil.toCamel(list.getString(i, "COLUMN_NAME")));					} else {						sb.append(list.getString(i, "COLUMN_NAME").toLowerCase());					}					sb.append(" = \"\";");				}			} else {				sb.append("String ");				if( camel.equals("Y")) {					sb.append(HoUtil.toCamel(HoUtil.rPad(list.getString(i, "COLUMN_NAME"),list.getInt(i, "COLUMN_MAX")+list.getString(i, "COLUMN_NAME").replaceAll("[a-zA-Z0-9]+", "").length(), " ")));				} else {					sb.append(HoUtil.rPad(list.getString(i, "COLUMN_NAME"),list.getInt(i, "COLUMN_MAX"), " ").toLowerCase());				}				sb.append(" = request.getParametemer(\"");				if( camel.equals("Y")) {					sb.append(HoUtil.toCamel(list.getString(i, "COLUMN_NAME").toLowerCase()));				} else {					sb.append(list.getString(i, "COLUMN_NAME").toLowerCase());				}				sb.append("\")");				if( list.getString(i, "DATA_TYPE").indexOf("CHAR") >= 0 && list.getInt(i, "DATA_LENGTH") == 8   ) {					sb.append(".replaceAll(\"[-.]\", \"\")");				} else if( list.getString(i, "DATA_TYPE").equals("DATE")   ) {					sb.append(".replaceAll(\"[-.]\", \"\")");				}				sb.append(";");			}			if( cw.equals("Y")) {				sb.append(" // ").append( list.getString(i, "COLUMN_COMMENTS_O") );			}			sb.append("\r\n");		}				if( param_type.equals("My") ) {			sb.append("\t").append("<assiciation property=\"").append(HoUtil.toCamel(list.getString(0, "TABLE_NAME"))).append("Vo\" javaType=\"").append(HoUtil.toCamel(list.getString(0, "TABLE_NAME")).substring(0, 1).toUpperCase() + HoUtil.toCamel(list.getString(0, "TABLE_NAME")).substring(1)).append("Vo\" >");			sb.append("\r\n");			sb.append("</resultMap>");			sb.append("\r\n");		}				sb.append("\r\n");		if( param_type.equals("QV")) {			sb.append("int idx = 0; ").append("\r\n");			for(int i=0; i<list.size(); i++ ) {				sb.append("pstmt.setString(idx++, ");				if( camel.equals("Y")) {					sb.append(HoUtil.toCamel(list.getString(i, "COLUMN_NAME")));				} else {					sb.append(list.getString(i, "COLUMN_NAME").toLowerCase());				}				sb.append(");").append("\r\n");			}			sb.append("\r\n");		}		if( param_type.startsWith("P")) {			sb.append("for( int i=0 ; i<request.getParameterValues(\"\").length ; i++ ) { ").append("\r\n");			sb.append("\t").append("param").append(_suffix).append(" = new String["+list.size()+ "];").append("\r\n");		}		for(int i=0; i<list.size(); i++ ) {			if( param_type.startsWith("P")) {				sb.append("\t");			}			if( param_type.equals("M")) {				sb.append("String [] ");				if( camel.equals("Y")) {					sb.append(HoUtil.rPad(HoUtil.toCamel(list.getString(i, "COLUMN_NAME").toLowerCase())+ "_es",list.getInt(i, "COLUMN_MAX"), " "));				} else {					sb.append(HoUtil.rPad(list.getString(i, "COLUMN_NAME").toLowerCase()+ "_es",list.getInt(i, "COLUMN_MAX"), " "));				}				sb.append(" = request.getParameterValues(\"");				if( camel.equals("Y")) {					sb.append(HoUtil.toCamel(list.getString(i, "COLUMN_NAME").toLowerCase())+"_es");				} else {					sb.append(list.getString(i, "COLUMN_NAME").toLowerCase()+"_es");				}				sb.append("\");");			} else if( param_type.equals("I")) {			} else if( param_type.equals("P")) {				if( cp.equals("Y") ) {					sb.append("param").append(_suffix).append("[");					sb.append( HoUtil.lPad(" ", String.valueOf(list.size()).length() - String.valueOf(i).length() , " ")  );					sb.append(i).append("] = ").append("request.getParameterValues(\"");					if( camel.equals("Y")) {						sb.append(HoUtil.toCamel(list.getString(i, "COLUMN_NAME").toLowerCase()));					} else {						sb.append(list.getString(i, "COLUMN_NAME").toLowerCase());					}					sb.append("\")[];");				} else {					sb.append("param").append(_suffix).append("[").append("] = ").append("request.getParameterValues(\"");					if( camel.equals("Y")) {						sb.append(HoUtil.toCamel(list.getString(i, "COLUMN_NAME").toLowerCase()));					} else {						sb.append(list.getString(i, "COLUMN_NAME").toLowerCase());					}					sb.append("\")[];");				}			} else if( param_type.equals("PN")) {				if( cp.equals("Y") ) {					sb.append("param").append(_suffix).append("[");					sb.append( HoUtil.lPad(" ", String.valueOf(list.size()).length() - String.valueOf(i).length() , " ")  );					sb.append(i).append("] = ").append("request.getParameterValues(\"");					if( camel.equals("Y")) {						sb.append(HoUtil.toCamel(list.getString(i, "COLUMN_NAME").toLowerCase()));					} else {						sb.append(list.getString(i, "COLUMN_NAME").toLowerCase());					}					sb.append("\")[i];");				} else {					sb.append("param").append(_suffix).append("[");					sb.append( HoUtil.lPad(" ", String.valueOf(list.size()).length() - String.valueOf(i).length() , " ")  );					sb.append(i).append("] = ").append("request.getParameterValues(\"");					if( camel.equals("Y")) {						sb.append(HoUtil.toCamel(list.getString(i, "COLUMN_NAME").toLowerCase()));					} else {						sb.append(list.getString(i, "COLUMN_NAME").toLowerCase());					}					sb.append("\")[i];");				}			} else if( param_type.equals("PV")) {				if( cp.equals("Y") ) {					sb.append("param").append(_suffix).append("[").append("] = ").append(HoUtil.rPad(list.getString(i, "COLUMN_NAME").toLowerCase()+";",list.getInt(i, "COLUMN_MAX"), " "));				} else {					sb.append("param").append(_suffix).append("[").append("] = ");					if( camel.equals("Y")) {						sb.append(HoUtil.toCamel(list.getString(i, "COLUMN_NAME").toLowerCase()));					} else {						sb.append(list.getString(i, "COLUMN_NAME").toLowerCase());					}					sb.append(";");				}			} else if( param_type.equals("PVN")) {				if( cp.equals("Y") ) {					sb.append("param").append(_suffix).append("[");					sb.append( HoUtil.lPad(" ", String.valueOf(list.size()).length() - String.valueOf(i).length() , " ")  );					sb.append(i).append("] = ").append(HoUtil.rPad(list.getString(i, "COLUMN_NAME").toLowerCase()+";",list.getInt(i, "COLUMN_MAX"), " "));				} else {					sb.append("param").append(_suffix).append("[");					sb.append( HoUtil.lPad(" ", String.valueOf(list.size()).length() - String.valueOf(i).length() , " ")  );					sb.append(i).append("] = ");					if( camel.equals("Y")) {						sb.append(HoUtil.toCamel(list.getString(i, "COLUMN_NAME").toLowerCase()));					} else {						sb.append(list.getString(i, "COLUMN_NAME").toLowerCase());					}					sb.append(";");				}			} else {				sb.append("String [] ").append(HoUtil.rPad(list.getString(i, "COLUMN_NAME").toLowerCase()+ "_es",list.getInt(i, "COLUMN_MAX"), " ")).append(" = request.getParameterValues(\"");				if( camel.equals("Y")) {					sb.append(HoUtil.toCamel(list.getString(i, "COLUMN_NAME").toLowerCase()));				} else {					sb.append(list.getString(i, "COLUMN_NAME").toLowerCase());				}				sb.append("\");");			}			if( cw.equals("Y")) {				sb.append(" // ").append( list.getString(i, "COLUMN_COMMENTS_O") );			}			sb.append("\r\n");		}		if( param_type.startsWith("P")) {			sb.append("} ").append("\r\n");		}		int indent = 0;		try {			indent = Integer.parseInt(_indent);		}catch(Exception e){		}		if( opt.startsWith("HTML")) {			sb.append("\r\n").append("\r\n");			for(int i=0; i<list.size(); i++ ) {				if( opt.startsWith("HTML_T")) {					for( int x=0; x<indent; x++) {						sb.append("\t");					}					sb.append("<tr>\r\n");					for( int x=0; x<indent; x++) {						sb.append("\t");					}					sb.append("\t<th><span>").append(list.getString(i, "COLUMN_COMMENTS_O")).append("</span></th>").append("\r\n");					for( int x=0; x<indent; x++) {						sb.append("\t");					}					sb.append("\t<td>").append("\r\n\t\t");				}				if( list.getString(i, "DATA_TYPE").equals("CLOB") || (list.getString(i, "DATA_TYPE").indexOf("CHAR") > 0  && list.getInt(i, "DATA_LENGTH") >= 2000)) {					for( int x=0; x<indent; x++) {						sb.append("\t");					}					sb.append("<textarea name=\"").append(list.getString(i, "COLUMN_NAME").toLowerCase()).append("\"");					sb.append(" id=\"id_").append(list.getString(i, "COLUMN_NAME").toLowerCase()).append("\"");					sb.append(" rows=\"6\" class=\"w98p\" >");					if( opt.endsWith("_H")) {						sb.append("<%=hh.get(\"").append(list.getString(i, "COLUMN_NAME").toLowerCase()).append("\")%").append(">");					} else if( opt.endsWith("_S")) {						sb.append("<%=sh.get(\"").append(list.getString(i, "COLUMN_NAME").toLowerCase()).append("\")%").append(">");					} else if( opt.endsWith("_V")) {						sb.append("<%=").append(list.getString(i, "COLUMN_NAME").toLowerCase()).append("%").append(">");					}					sb.append("</textarea>\r\n");				} else {					if( HoValidator.isNotEmpty(list.getString(i, "CODE"))) {						for( int x=0; x<indent; x++) {							sb.append("\t");						}						sb.append("<select name=\"").append(list.getString(i, "COLUMN_NAME").toLowerCase()).append("\"");						sb.append(" id=\"id_").append(list.getString(i, "COLUMN_NAME").toLowerCase()).append("\">").append("\r\n");						if( opt.startsWith("HTML_T")) {sb.append("\t\t");}						for( int x=0; x<indent; x++) {							sb.append("\t");						}						sb.append("\t<option value=\"\">- 전체 -</option>").append("\r\n");						if( opt.startsWith("HTML_T")) {sb.append("\t\t");}						for( int x=0; x<indent; x++) {							sb.append("\t");						}						sb.append("\t<%").append("\r\n");						if( opt.startsWith("HTML_T")) {sb.append("\t\t");}						for( int x=0; x<indent; x++) {							sb.append("\t");						}						sb.append("\t\tparam").append("").append(" = new String[2];").append("\r\n");						if( opt.startsWith("HTML_T")) {sb.append("\t\t");}						for( int x=0; x<indent; x++) {							sb.append("\t");						}						sb.append("\t\tparam[0] = S_COMP;").append("\r\n");						if( opt.startsWith("HTML_T")) {sb.append("\t\t");}						for( int x=0; x<indent; x++) {							sb.append("\t");						}						sb.append("\t\tparam[1] = \"").append(list.getString(i, "CODE")).append("\";").append("\r\n");						if( opt.startsWith("HTML_T")) {sb.append("\t\t");}						for( int x=0; x<indent; x++) {							sb.append("\t");						}						sb.append("\t%").append(">").append("\r\n");						if( opt.startsWith("HTML_T")) {sb.append("\t\t");}						for( int x=0; x<indent; x++) {							sb.append("\t");						}						sb.append("\t<%=").append("hu.makeOption(\"com/Common.sql\", \"selCodeList\", param, ");						if( opt.endsWith("_H")) {							sb.append("hh.get(\"").append(list.getString(i, "COLUMN_NAME").toLowerCase()).append("\")");						} else if( opt.endsWith("_S")) {							sb.append("sh.get(\"").append(list.getString(i, "COLUMN_NAME").toLowerCase()).append("\")");						} else if( opt.endsWith("_V")) {							sb.append(list.getString(i, "COLUMN_NAME").toLowerCase());						} else if( opt.endsWith("_N")) {							sb.append("\"\"");						}						sb.append(")").append("%").append(">").append("\r\n");						if( opt.startsWith("HTML_T")) {sb.append("\t\t");}						for( int x=0; x<indent; x++) {							sb.append("\t");						}						sb.append("\t<%").append("\r\n");						if( opt.startsWith("HTML_T")) {sb.append("\t\t");}						for( int x=0; x<indent; x++) {							sb.append("\t");						}						sb.append("\t\tparam").append("").append(" = new String[4];").append("\r\n");						if( opt.startsWith("HTML_T")) {sb.append("\t\t");}						for( int x=0; x<indent; x++) {							sb.append("\t");						}						sb.append("\t\tparam[0] = S_COMP;").append("\r\n");						if( opt.startsWith("HTML_T")) {sb.append("\t\t");}						for( int x=0; x<indent; x++) {							sb.append("\t");						}						sb.append("\t\tparam[1] = \"").append(list.getString(i, "CODE")).append("\";").append("\r\n");						if( opt.startsWith("HTML_T")) {sb.append("\t\t");}						for( int x=0; x<indent; x++) {							sb.append("\t");						}						sb.append("\t\tparam[2] = \"?\";").append("\r\n");						if( opt.startsWith("HTML_T")) {sb.append("\t\t");}						for( int x=0; x<indent; x++) {							sb.append("\t");						}						sb.append("\t\tparam[3] = \"?\";").append("\r\n");						if( opt.startsWith("HTML_T")) {sb.append("\t\t");}						for( int x=0; x<indent; x++) {							sb.append("\t");						}						sb.append("\t%").append(">").append("\r\n");						if( opt.startsWith("HTML_T")) {sb.append("\t\t");}						for( int x=0; x<indent; x++) {							sb.append("\t");						}						sb.append("\t<%=").append("hu.makeOption(\"com/Common.sql\", \"selCodeListUseDef\", param, \"?\", \"?\", ");						if( opt.endsWith("_H")) {							sb.append("hh.get(\"").append(list.getString(i, "COLUMN_NAME").toLowerCase()).append("\")");						} else if( opt.endsWith("_S")) {							sb.append("sh.get(\"").append(list.getString(i, "COLUMN_NAME").toLowerCase()).append("\")");						} else if( opt.endsWith("_V")) {							sb.append(list.getString(i, "COLUMN_NAME").toLowerCase());						} else if( opt.endsWith("_N")) {							sb.append("\"\"");						}						sb.append(")").append("%").append(">").append("\r\n");						if( opt.startsWith("HTML_T")) {sb.append("\t\t");}						for( int x=0; x<indent; x++) {							sb.append("\t");						}						sb.append("</select>\r\n");					} else {						for( int x=0; x<indent; x++) {							sb.append("\t");						}						if( list.getString(i, "DATA_TYPE").indexOf("CHAR") >= 0 && list.getInt(i, "DATA_LENGTH") == 8   ) {							sb.append("<div class=\"tbl\"><span id=\"cal_").append(list.getString(i, "COLUMN_NAME").toLowerCase()).append("\"></span></div>");							sb.append("\r\n");							for( int x=0; x<indent; x++) {								sb.append("\t");							}							if( opt.startsWith("HTML_T")) {sb.append("\t\t");}							sb.append("<%=hu.jspmakeCalendar(\"").append(list.getString(i, "COLUMN_NAME").toLowerCase()).append("\",");							sb.append(" \"cal_").append(list.getString(i, "COLUMN_NAME").toLowerCase()).append("\", ");							if( opt.endsWith("_H")) {								sb.append("hh.get(\"").append(list.getString(i, "COLUMN_NAME").toLowerCase()).append("\"))%").append(">");							} else if( opt.endsWith("_S")) {								sb.append("sh.get(\"").append(list.getString(i, "COLUMN_NAME").toLowerCase()).append("\"))%").append(">");							} else if( opt.endsWith("_V")) {								sb.append(list.getString(i, "COLUMN_NAME").toLowerCase()).append(")%").append(">");							} else if( opt.endsWith("_N")) {								sb.append("\"\")%").append(">");							}							sb.append("\r\n");						} else if( list.getString(i, "DATA_TYPE").equals("DATE")   ) {							sb.append("<div class=\"tbl\"><span id=\"cal_").append(list.getString(i, "COLUMN_NAME").toLowerCase()).append("\"></span></div>");							sb.append("\r\n");							for( int x=0; x<indent; x++) {								sb.append("\t");							}							if( opt.startsWith("HTML_T")) {sb.append("\t\t");}							sb.append("<%=hu.jspmakeCalendar(\"").append(list.getString(i, "COLUMN_NAME").toLowerCase()).append("\",");							sb.append(" \"cal_").append(list.getString(i, "COLUMN_NAME").toLowerCase()).append("\", ");							if( opt.endsWith("_H")) {								sb.append("hh.get(\"").append(list.getString(i, "COLUMN_NAME").toLowerCase()).append("\"))%").append(">");							} else if( opt.endsWith("_S")) {								sb.append("sh.get(\"").append(list.getString(i, "COLUMN_NAME").toLowerCase()).append("\"))%").append(">");							} else if( opt.endsWith("_V")) {								sb.append(list.getString(i, "COLUMN_NAME").toLowerCase()).append(")%").append(">");							} else if( opt.endsWith("_N")) {								sb.append("\"\")%").append(">");							}							sb.append("\r\n");						} else {							if( list.getString(i, "COLUMN_NAME").endsWith("_YN")) {								sb.append("<select name=\"").append(list.getString(i, "COLUMN_NAME").toLowerCase()).append("\"");								sb.append(" id=\"id_").append(list.getString(i, "COLUMN_NAME").toLowerCase()).append("\">").append("\r\n");								if( opt.startsWith("HTML_T")) {sb.append("\t\t");}								for( int x=0; x<indent; x++) {									sb.append("\t");								}								sb.append("\t<option value=\"\"");								if( opt.endsWith("_H")) {									sb.append(" <% if(hh.get(\"").append(list.getString(i, "COLUMN_NAME").toLowerCase()).append("\").equals(\"\")) {%").append("> selected=\"selected\"<% }").append("%").append(">>-선택-</option>\r\n");								} else if( opt.endsWith("_S")) {									sb.append(" <% if(sh.get(\"").append(list.getString(i, "COLUMN_NAME").toLowerCase()).append("\").equals(\"\")) {%").append("> selected=\"selected\"<% }").append("%").append(">>-선택-</option>\r\n");								} else if( opt.endsWith("_V")) {									sb.append(" <% if(").append(list.getString(i, "COLUMN_NAME").toLowerCase()).append(".equals(\"\")) {%").append("> selected=\"selected\"<% }").append("%").append(">>-선택-</option>\r\n");								}   else if( opt.endsWith("_N")) {									sb.append(">-선택-</option>\r\n");								}								if( opt.startsWith("HTML_T")) {sb.append("\t\t");}								for( int x=0; x<indent; x++) {									sb.append("\t");								}								sb.append("\t<option value=\"Y\"");								if( opt.endsWith("_H")) {									sb.append(" <% if(hh.get(\"").append(list.getString(i, "COLUMN_NAME").toLowerCase()).append("\").equals(\"Y\")) {%").append("> selected=\"selected\"<% }").append("%").append(">>Y</option>\r\n");								} else if( opt.endsWith("_S")) {									sb.append(" <% if(sh.get(\"").append(list.getString(i, "COLUMN_NAME").toLowerCase()).append("\").equals(\"Y\")) {%").append("> selected=\"selected\"<% }").append("%").append(">>Y</option>\r\n");								} else if( opt.endsWith("_V")) {									sb.append(" <% if(").append(list.getString(i, "COLUMN_NAME").toLowerCase()).append(".equals(\"Y\")) {%").append("> selected=\"selected\"<% }").append("%").append(">>Y</option>\r\n");								} else if( opt.endsWith("_N")) {									sb.append(">Y</option>\r\n");								}								if( opt.startsWith("HTML_T")) {sb.append("\t\t");}								for( int x=0; x<indent; x++) {									sb.append("\t");								}								sb.append("\t<option value=\"N\"");								if( opt.endsWith("_H")) {									sb.append(" <% if(hh.get(\"").append(list.getString(i, "COLUMN_NAME").toLowerCase()).append("\").equals(\"N\")) {%").append("> selected=\"selected\"<% }").append("%").append(">>N</option>\r\n");								} else if( opt.endsWith("_S")) {									sb.append(" <% if(sh.get(\"").append(list.getString(i, "COLUMN_NAME").toLowerCase()).append("\").equals(\"N\")) {%").append("> selected=\"selected\"<% }").append("%").append(">>N</option>\r\n");								} else if( opt.endsWith("_V")) {									sb.append(" <% if(").append(list.getString(i, "COLUMN_NAME").toLowerCase()).append(".equals(\"N\")) {%").append("> selected=\"selected\"<% }").append("%").append(">>N</option>\r\n");								}   else if( opt.endsWith("_N")) {									sb.append(">N</option>\r\n");								}								if( opt.startsWith("HTML_T")) {sb.append("\t\t");}								for( int x=0; x<indent; x++) {									sb.append("\t");								}								sb.append("</select>\r\n");							} else {								sb.append("<input type=\"text\" name=\"").append(list.getString(i, "COLUMN_NAME").toLowerCase()).append("\"");								sb.append(" id=\"id_").append(list.getString(i, "COLUMN_NAME").toLowerCase()).append("\"");								if( opt.endsWith("_H")) {									sb.append(" value=\"").append("<%=hh.get(\"").append(list.getString(i, "COLUMN_NAME").toLowerCase()).append("\")%").append(">\"");								} else if( opt.endsWith("_S")) {									sb.append(" value=\"").append("<%=sh.get(\"").append(list.getString(i, "COLUMN_NAME").toLowerCase()).append("\")%").append(">\"");								} else if( opt.endsWith("_V")) {									sb.append(" value=\"").append("<%=").append(list.getString(i, "COLUMN_NAME").toLowerCase()).append("%").append(">\"");								} else if( opt.endsWith("_N")) {									sb.append(" value=\"\"");								}								if( list.getString(i, "DATA_TYPE").equals("NUMBER")) {									sb.append(" class=\"num\" onkeypress=\"onlyNum();\"");								}								if( HoValidator.isNotEmpty(list.getString(i, "DATA_LENGTH")) ) {									if( list.getString(i, "DATA_TYPE").equals("NUMBER") ) {										if( list.getString(i, "DATA_LENGTH").indexOf(',')>0 ) {											String [] val = list.getString(i, "DATA_LENGTH").split(",");											int v_i = 0;											float v_f = 0.0f;											if(val.length > 0 ) {												v_i = Integer.parseInt(val[0]);											}											if(val.length > 1 ) {												v_f = Float.parseFloat(val[1]);											}											sb.append(" maxlength=\"").append(v_i + (v_i/3)).append("\" size=\"").append(v_i + (v_i/3)).append("\"");										} else {											sb.append(" maxlength=\"").append(list.getInt(i, "DATA_LENGTH") + (list.getInt(i, "DATA_LENGTH")/3)).append("\" size=\"").append(list.getInt(i, "DATA_LENGTH") + (list.getInt(i, "DATA_LENGTH")/3) ).append("\"");										}									} else {										sb.append(" maxlength=\"").append(list.getString(i, "DATA_LENGTH")).append("\" size=\"").append(list.getString(i, "DATA_LENGTH")).append("\"");									}								}								sb.append(" />\r\n");							}						}					}				}				if( opt.startsWith("HTML_T")) {					for( int x=0; x<indent; x++) {						sb.append("\t");					}					sb.append("\t</td>\r\n");					for( int x=0; x<indent; x++) {						sb.append("\t");					}					sb.append("</tr>");				}				sb.append("\r\n");			}		} else if( opt.equals("GRID")) {			sb.append("\r\n").append("\r\n");			for(int i=0; i<list.size(); i++ ) {				for( int x=0; x<indent; x++) {					sb.append("\t");				}				if( i != 0 ) {					sb.append(",");				}				sb.append("{ id: \"").append(list.getString(i, "COLUMN_NAME").toLowerCase()).append("\"");				sb.append(", header: \"").append(list.getString(i, "COLUMN_COMMENTS_O")).append("\"");				sb.append(", dataIndex: \"").append(list.getString(i, "COLUMN_NAME")).append("\"");				if( list.getString(i, "DATA_TYPE").equals("NUMBER") ) {					sb.append(", renderer: numberFormat");				} else {					// sb.append(", renderer: renderTopic");				}				sb.append(", width: 70 , align:\"center\",  hidden: false, sortable: true}").append("\r\n");				if( HoValidator.isNotEmpty(list.getString(i, "CODE"))) {					sb.append(",");					sb.append("{ id: \"").append(list.getString(i, "COLUMN_NAME").toLowerCase()).append("\"_nm");					sb.append(", header: \"").append(list.getString(i, "COLUMN_COMMENTS_O")).append("\"");					sb.append(", dataIndex: \"").append(list.getString(i, "COLUMN_NAME")).append("_NM\"");					//sb.append(", renderer: renderTopic");					sb.append(", width: 70 , align:\"center\",  hidden: false, sortable: true}").append("\r\n");				}			}		} else if( opt.startsWith("PH")) {			sb.append("\r\n").append("\r\n");			if( opt.equals("PH")) {				for(int i=0; i<list.size(); i++ ) {					sb.append("String ");					if( cp.equals("Y") ) {						sb.append(HoUtil.rPad(list.getString(i, "COLUMN_NAME").toLowerCase(),list.getInt(i, "COLUMN_MAX"), " "));					} else {						sb.append(list.getString(i, "COLUMN_NAME").toLowerCase());					}					if( list.getString(i, "DATA_TYPE").indexOf("CHAR") >= 0 && list.getInt(i, "DATA_LENGTH") == 8   ) {						sb.append(" = hh.get(\"").append(list.getString(i, "COLUMN_NAME").toLowerCase()).append("\").replaceAll(\"[-.]\", \"\");");					} else if( list.getString(i, "DATA_TYPE").equals("DATE")   ) {						sb.append(" = hh.get(\"").append(list.getString(i, "COLUMN_NAME").toLowerCase()).append("\").replaceAll(\"[-.]\", \"\");");					} else {						sb.append(" = hh.get(\"").append(list.getString(i, "COLUMN_NAME").toLowerCase()).append("\");");					}					if( cw.equals("Y")) {						sb.append(" // ").append( list.getString(i, "COLUMN_COMMENTS_O") );					}					sb.append("\r\n");				}			} else if( opt.equals("PHD")) {				for(int i=0; i<list.size(); i++ ) {					sb.append("String ");					if( cp.equals("Y") ) {						sb.append(HoUtil.rPad(list.getString(i, "COLUMN_NAME").toLowerCase(),list.getInt(i, "COLUMN_MAX"), " "));					} else {						sb.append(list.getString(i, "COLUMN_NAME").toLowerCase());					}					sb.append(" = \"\";");					if( cw.equals("Y")) {						sb.append(" // ").append( list.getString(i, "COLUMN_COMMENTS_O") );					}					sb.append("\r\n");				}				sb.append("\r\n");				for(int i=0; i<list.size(); i++ ) {					if( cp.equals("Y") ) {						sb.append(HoUtil.rPad(list.getString(i, "COLUMN_NAME").toLowerCase(),list.getInt(i, "COLUMN_MAX"), " "));					} else {						sb.append(list.getString(i, "COLUMN_NAME").toLowerCase());					}					if( list.getString(i, "DATA_TYPE").indexOf("CHAR") >= 0 && list.getInt(i, "DATA_LENGTH") == 8   ) {						sb.append(" = hh.get(\"").append(list.getString(i, "COLUMN_NAME").toLowerCase()).append("\").replaceAll(\"[-.]\", \"\");");					} else if( list.getString(i, "DATA_TYPE").equals("DATE")   ) {						sb.append(" = hh.get(\"").append(list.getString(i, "COLUMN_NAME").toLowerCase()).append("\").replaceAll(\"[-.]\", \"\");");					} else {						sb.append(" = hh.get(\"").append(list.getString(i, "COLUMN_NAME").toLowerCase()).append("\");");					}					if( cw.equals("Y")) {						sb.append(" // ").append( list.getString(i, "COLUMN_COMMENTS_O") );					}					sb.append("\r\n");				}			}		} else if( opt.startsWith("PS")) {			sb.append("\r\n").append("\r\n");			if( opt.equals("PS")) {				for(int i=0; i<list.size(); i++ ) {					sb.append("String ");					if( cp.equals("Y") ) {						sb.append(HoUtil.rPad(list.getString(i, "COLUMN_NAME").toLowerCase(),list.getInt(i, "COLUMN_MAX"), " "));					} else {						sb.append(list.getString(i, "COLUMN_NAME").toLowerCase());					}					sb.append(" = sh.get(\"").append(list.getString(i, "COLUMN_NAME")).append("\");");					if( cw.equals("Y")) {						sb.append(" // ").append( list.getString(i, "COLUMN_COMMENTS_O") );					}					sb.append("\r\n");					if( !HoValidator.isEmpty(list.getString(i, "SUB_QUERY")) ) {						String name = "";						if( list.getString(i, "SUB_QUERY").endsWith(")") ) {							name = list.getString(i, "COLUMN_NAME") + "_NM";						} else {							name = list.getString(i, "SUB_QUERY").substring(list.getString(i, "SUB_QUERY").lastIndexOf(' ')+1);						}						sb.append("String ");						if( cp.equals("Y") ) {							sb.append(HoUtil.rPad(name.toLowerCase(),list.getInt(i, "COLUMN_MAX"), " "));						} else {							sb.append(name.toLowerCase());						}						sb.append(" = sh.get(\"").append(name.toUpperCase()).append("\");");						if( cw.equals("Y")) {							sb.append(" // ").append( list.getString(i, "COLUMN_COMMENTS_O") + "_명" );						}						sb.append("\r\n");					} else if( !HoValidator.isEmpty(list.getString(i, "CODE")) ) {						String name = list.getString(i, "COLUMN_NAME") + "_NM";						sb.append("String ");						if( cp.equals("Y") ) {							sb.append(HoUtil.rPad(name.toLowerCase(),list.getInt(i, "COLUMN_MAX"), " "));						} else {							sb.append(name.toLowerCase());						}						sb.append(" = sh.get(\"").append(name.toUpperCase()).append("\");");						if( cw.equals("Y")) {							sb.append(" // ").append( list.getString(i, "COLUMN_COMMENTS_O") + "_명" );						}						sb.append("\r\n");					} else if( list.getString(i, "DATA_TYPE").indexOf("CHAR") >= 0 && list.getInt(i, "DATA_LENGTH") == 8   ) {						String name = list.getString(i, "COLUMN_NAME") + "_FMT";						sb.append("String ");						if( cp.equals("Y") ) {							sb.append(HoUtil.rPad(name.toLowerCase(),list.getInt(i, "COLUMN_MAX"), " "));						} else {							sb.append(name.toLowerCase());						}						sb.append(" = sh.get(\"").append(name.toUpperCase()).append("\");");						if( cw.equals("Y")) {							sb.append(" // ").append( list.getString(i, "COLUMN_COMMENTS_O") + " (YYYY.MM.DD)" );						}						sb.append("\r\n");					} else if( list.getString(i, "DATA_TYPE").equals("DATE")   ) {						String name = list.getString(i, "COLUMN_NAME") + "_FMT";						sb.append("String ");						if( cp.equals("Y") ) {							sb.append(HoUtil.rPad(name.toLowerCase(),list.getInt(i, "COLUMN_MAX"), " "));						} else {							sb.append(name.toLowerCase());						}						sb.append(" = sh.get(\"").append(name.toUpperCase()).append("\");");						if( cw.equals("Y")) {							sb.append(" // ").append( list.getString(i, "COLUMN_COMMENTS_O") + " (YYYY.MM.DD)" );						}						sb.append("\r\n");					}				}			} else if( opt.equals("PSD")) {				for(int i=0; i<list.size(); i++ ) {					sb.append("String ");					if( cp.equals("Y") ) {						sb.append(HoUtil.rPad(list.getString(i, "COLUMN_NAME").toLowerCase(),list.getInt(i, "COLUMN_MAX"), " "));					} else {						sb.append(list.getString(i, "COLUMN_NAME").toLowerCase());					}					sb.append(" = \"\";");					if( cw.equals("Y")) {						sb.append(" // ").append( list.getString(i, "COLUMN_COMMENTS_O") );					}					sb.append("\r\n");					if( !HoValidator.isEmpty(list.getString(i, "SUB_QUERY")) ) {						String name = "";						if( list.getString(i, "SUB_QUERY").endsWith(")") ) {							name = list.getString(i, "COLUMN_NAME") + "_NM";						} else {							name = list.getString(i, "SUB_QUERY").substring(list.getString(i, "SUB_QUERY").lastIndexOf(' ')+1);						}						sb.append("String ");						if( cp.equals("Y") ) {							sb.append(HoUtil.rPad(name.toLowerCase(),list.getInt(i, "COLUMN_MAX"), " "));						} else {							sb.append(name.toLowerCase());						}						sb.append(" = \"\";");						if( cw.equals("Y")) {							sb.append(" // ").append( list.getString(i, "COLUMN_COMMENTS_O") + "_명" );						}						sb.append("\r\n");					} else if( !HoValidator.isEmpty(list.getString(i, "CODE")) ) {						String name = list.getString(i, "COLUMN_NAME") + "_NM";						sb.append("String ");						if( cp.equals("Y") ) {							sb.append(HoUtil.rPad(name.toLowerCase(),list.getInt(i, "COLUMN_MAX"), " "));						} else {							sb.append(name.toLowerCase());						}						sb.append(" = \"\";");						if( cw.equals("Y")) {							sb.append(" // ").append( list.getString(i, "COLUMN_COMMENTS_O") + "_명" );						}						sb.append("\r\n");					}else if( list.getString(i, "DATA_TYPE").indexOf("CHAR") >= 0 && list.getInt(i, "DATA_LENGTH") == 8   ) {						String name = list.getString(i, "COLUMN_NAME") + "_FMT";						sb.append("String ");						if( cp.equals("Y") ) {							sb.append(HoUtil.rPad(name.toLowerCase(),list.getInt(i, "COLUMN_MAX"), " "));						} else {							sb.append(name.toLowerCase());						}						sb.append(" = \"\";");						if( cw.equals("Y")) {							sb.append(" // ").append( list.getString(i, "COLUMN_COMMENTS_O") + " (YYYY.MM.DD)" );						}						sb.append("\r\n");					} else if( list.getString(i, "DATA_TYPE").equals("DATE")   ) {						String name = list.getString(i, "COLUMN_NAME") + "_FMT";						sb.append("String ");						if( cp.equals("Y") ) {							sb.append(HoUtil.rPad(name.toLowerCase(),list.getInt(i, "COLUMN_MAX"), " "));						} else {							sb.append(name.toLowerCase());						}						sb.append(" = \"\";");						if( cw.equals("Y")) {							sb.append(" // ").append( list.getString(i, "COLUMN_COMMENTS_O") + " (YYYY.MM.DD)" );						}						sb.append("\r\n");					}				}				sb.append("\r\n");				for(int i=0; i<list.size(); i++ ) {					if( cp.equals("Y") ) {						sb.append(HoUtil.rPad(list.getString(i, "COLUMN_NAME").toLowerCase(),list.getInt(i, "COLUMN_MAX"), " "));					} else {						sb.append(list.getString(i, "COLUMN_NAME").toLowerCase());					}					sb.append(" = sh.get(\"").append(list.getString(i, "COLUMN_NAME")).append("\");");					if( cw.equals("Y")) {						sb.append(" // ").append( list.getString(i, "COLUMN_COMMENTS_O") );					}					sb.append("\r\n");					if( !HoValidator.isEmpty(list.getString(i, "SUB_QUERY")) ) {						String name = "";						if( list.getString(i, "SUB_QUERY").endsWith(")") ) {							name = list.getString(i, "COLUMN_NAME") + "_NM";						} else {							name = list.getString(i, "SUB_QUERY").substring(list.getString(i, "SUB_QUERY").lastIndexOf(' ')+1);						}						if( cp.equals("Y") ) {							sb.append(HoUtil.rPad(name.toLowerCase(),list.getInt(i, "COLUMN_MAX"), " "));						} else {							sb.append(name.toLowerCase());						}						sb.append(" = sh.get(\"").append(name.toUpperCase()).append("\");");						if( cw.equals("Y")) {							sb.append(" // ").append( list.getString(i, "COLUMN_COMMENTS_O") + "_명" );						}						sb.append("\r\n");					} else if( !HoValidator.isEmpty(list.getString(i, "CODE")) ) {						String name = list.getString(i, "COLUMN_NAME") + "_NM";						if( cp.equals("Y") ) {							sb.append(HoUtil.rPad(name.toLowerCase(),list.getInt(i, "COLUMN_MAX"), " "));						} else {							sb.append(name.toLowerCase());						}						sb.append(" = sh.get(\"").append(name.toUpperCase()).append("\");");						if( cw.equals("Y")) {							sb.append(" // ").append( list.getString(i, "COLUMN_COMMENTS_O") + "_명" );						}						sb.append("\r\n");					} else if( list.getString(i, "DATA_TYPE").indexOf("CHAR") >= 0 && list.getInt(i, "DATA_LENGTH") == 8   ) {						String name = list.getString(i, "COLUMN_NAME") + "_FMT";						if( cp.equals("Y") ) {							sb.append(HoUtil.rPad(name.toLowerCase(),list.getInt(i, "COLUMN_MAX"), " "));						} else {							sb.append(name.toLowerCase());						}						sb.append(" = sh.get(\"").append(name.toUpperCase()).append("\");");						if( cw.equals("Y")) {							sb.append(" // ").append( list.getString(i, "COLUMN_COMMENTS_O") + " (YYYY.MM.DD)" );						}						sb.append("\r\n");					} else if( list.getString(i, "DATA_TYPE").equals("DATE")   ) {						String name = list.getString(i, "COLUMN_NAME") + "_FMT";						if( cp.equals("Y") ) {							sb.append(HoUtil.rPad(name.toLowerCase(),list.getInt(i, "COLUMN_MAX"), " "));						} else {							sb.append(name.toLowerCase());						}						sb.append(" = sh.get(\"").append(name.toUpperCase()).append("\");");						if( cw.equals("Y")) {							sb.append(" // ").append( list.getString(i, "COLUMN_COMMENTS_O") + " (YYYY.MM.DD)" );						}						sb.append("\r\n");					}				}			}		}		// Tag File 생성 일 경우..		else if( opt.startsWith("TAGFILE")) {			// GRID COLUMN			sb.append("\r\n");			sb.append("\r\n");			if( opt.equals("TAGFILE_G")) {				for(int i=0; i<list.size(); i++ ) {					sb.append("<jun:column title=\"" + list.getString(i, "COLUMN_COMMENTS_O") +"\"" );					sb.append(" column=\"" + list.getString(i, "COLUMN_NAME") +"\"" );					sb.append(" width=\"\" resize=\"\" sortable=\"\" renderer=\"\"" );					sb.append(" editor=\"\"" );					sb.append("></jun:column>" );					sb.append("\r\n");				}			}		}		return HoUtil.escapeForHtml(sb.toString());	}%>